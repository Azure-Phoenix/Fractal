vec3[9] cmap;

vec3 interpolate(float a) // a in [0,1]
{
    float a_scaled = a*7.0;
    int ind_low = int(floor(a_scaled));
    int ind_high = (ind_low + 1);
    float m = a_scaled - float(ind_low);
    
    vec3 color = (1.0-m)*cmap[ind_low] + m*cmap[ind_high];
    
    return color;
}

vec2 cmul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }

float mandelbrot(vec2 c, int max){
    
    float iterations = 0.0;
    vec2 z = vec2(0.0, 0.0);
    
    for (int i=0; i<max; i++){
        z = cmul(z, z) + c;
        
        if (dot(z, z) > 4.0){
            iterations = float(i)/float(max);
            break;
        }
    }
    return iterations;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{    
	cmap[3] = vec3(0.88575015840754434, 0.85000924943067835,  0.8879736506427196);
	cmap[2] = vec3(0.5778116438998202,  0.70613106157153982,  0.77825345121025524);
	cmap[1] = vec3(0.38407269378943537, 0.46139018782416635,  0.73094665432902683);
	cmap[0] = vec3(0.18739228342697645, 0.077102096899588329, 0.21618875376309582);
    
	cmap[6] = vec3(0.45383005086999889, 0.11622183788331528,  0.30970441249844921);
	cmap[5] = vec3(0.6980608153581771,  0.33828976326048621,  0.32207478855218091);
	cmap[4] = vec3(0.7991624518501963,  0.63628379372029187,  0.53134495942561433);
    
    cmap[7] = vec3(0.18739228342697645, 0.077102096899588329, 0.21618875376309582);
    cmap[8] = vec3(0.18739228342697645, 0.077102096899588329, 0.21618875376309582);
    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    vec2 point = vec2(4.0 *uv.x - 2.0, 3.0*uv.y - 1.5);
    vec3 col = interpolate(mandelbrot(point, 40));

    // Output to screen
    fragColor = vec4(col,1.0);
}